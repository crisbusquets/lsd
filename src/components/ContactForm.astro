---

---

<form
  id="contactForm"
  name="contacto"
  method="POST"
  data-netlify="true"
  data-netlify-honeypot="bot-field"
  action="/gracias"
  novalidate
>
  <input type="hidden" name="form-name" value="contacto" />
  <div>
    <label class="first" for="fullname">Nombre</label>
    <input id="fullname" name="fullname" type="text" required />
    <span class="error-message"></span>
  </div>
  <div>
    <label for="email">Email</label>
    <input id="email" name="email" type="email" required />
    <span class="error-message"></span>
  </div>
  <div>
    <label for="message">Mensaje</label>
    <textarea id="message" name="message" required></textarea>
    <span class="error-message"></span>
  </div>
  <div>
    <label for="captcha">¿Qué significa "E pluribus unum"?</label>
    <input id="captcha" name="captcha" type="text" required />
    <span class="error-message"></span>
  </div>
  <button type="submit">Enviar</button>
</form>

<script>
  import { z } from "zod";

  const schema = z.object({
    fullname: z.string().min(1, "\u26A0 Este campo es obligatorio"),
    email: z.string().email("\u26A0 Asegúrate de que el email es válido"),
    message: z.string().min(1, "\u26A0 Este campo es obligatorio"),
    captcha: z
      .string()
      .regex(
        /^(de\s*muchos\s*,?\s*uno|uno\s*de\s*muchos)$/i,
        "Respuesta incorrecta. Asegúrate de que la has escrito bien."
      ),
  });

  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("contactForm") as HTMLFormElement;

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      // Clear previous errors
      document.querySelectorAll(".error-message").forEach((span) => (span.textContent = ""));
      document.querySelectorAll(".error-input").forEach((input) => input.classList.remove("error-input"));

      const formData = new FormData(form);
      const data = {
        fullname: formData.get("fullname")?.trim() || "",
        email: formData.get("email")?.trim() || "",
        message: formData.get("message")?.trim() || "",
        captcha: formData.get("captcha")?.trim() || "",
      };

      try {
        schema.parse(data);
        form.submit();
      } catch (err) {
        if (err instanceof z.ZodError) {
          err.errors.forEach((error) => {
            const field = error.path[0];
            const element = document.getElementById(field);
            if (element) {
              element.classList.add("error-input");
              const errorSpan = element.nextElementSibling;
              if (errorSpan) errorSpan.textContent = error.message;
            }
          });
        }
      }
    });
  });
</script>

<style>
  form input,
  form textarea {
    width: 100%;
    font-family: var(--font-family);
    border: 1px solid var(--color-border);
    padding: var(--space-sm);
  }

  form input:focus,
  form textarea:focus {
    outline: none;
    border: 1px solid var(--color-primary);
  }

  form input.error-input,
  form textarea.error-input {
    border: 1px solid var(--color-error);
  }

  form span {
    display: block;
    color: var(--color-error);
  }

  form label {
    display: block;
    margin: var(--space-xl) 0 var(--space-sm) 0;
  }

  form label.first {
    margin: 0 0 var(--space-sm) 0;
  }

  form textarea {
    resize: none;
  }

  form button {
    margin-top: var(--space-lg);
    font-family: var(--font-family);
    font-weight: bold;
    background-color: var(--color-primary);
    border: 1px solid var(--color-primary);
    padding: var(--space-sm) var(--space-md);
    color: var(--html-background-color);
    transition: var(--duration-default);
  }

  form button:hover {
    background-color: var(--color-primary-dark);
    border: 1px solid var(--color-primary-dark);
  }
</style>
